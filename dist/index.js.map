{"version":3,"sources":["mixins/autoplay.js","utils/debounce.js","Navigation.vue","Pagination.vue","Slide.vue","Carousel.vue","index.js"],"names":["autoplay","props","type","Boolean","default","autoplayTimeout","Number","autoplayHoverPause","autoplayDirection","String","data","autoplayInterval","destroyed","$isServer","$el","removeEventListener","pauseAutoplay","startAutoplay","methods","clearInterval","setInterval","autoplayAdvancePage","restartAutoplay","advancePage","mounted","addEventListener","debounce","func","wait","immediate","timeout","context","callNow","clearTimeout","setTimeout","apply","install","Vue","component","Carousel","Slide"],"mappings":"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","file":"index.js","sourceRoot":"../src","sourcesContent":["const autoplay = {\n  props: {\n    /**\n     * Flag to enable autoplay\n     */\n    autoplay: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * Time elapsed before advancing slide\n     */\n    autoplayTimeout: {\n      type: Number,\n      default: 2000\n    },\n    /**\n     * Flag to pause autoplay on hover\n     */\n    autoplayHoverPause: {\n      type: Boolean,\n      default: true\n    },\n    /**\n     * Autoplay direction. User can insert backward to make autoplay move from right to left\n     */\n    autoplayDirection: {\n      type: String,\n      default: \"forward\"\n    }\n  },\n  data() {\n    return {\n      autoplayInterval: null\n    };\n  },\n  destroyed() {\n    if (!this.$isServer) {\n      this.$el.removeEventListener(\"mouseenter\", this.pauseAutoplay);\n      this.$el.removeEventListener(\"mouseleave\", this.startAutoplay);\n    }\n  },\n  methods: {\n    pauseAutoplay() {\n      if (this.autoplayInterval) {\n        this.autoplayInterval = clearInterval(this.autoplayInterval);\n      }\n    },\n    startAutoplay() {\n      if (this.autoplay) {\n        this.autoplayInterval = setInterval(\n          this.autoplayAdvancePage,\n          this.autoplayTimeout\n        );\n      }\n    },\n    restartAutoplay() {\n      this.pauseAutoplay();\n      this.startAutoplay();\n    },\n    autoplayAdvancePage() {\n      this.advancePage(this.autoplayDirection);\n    }\n  },\n  mounted() {\n    if (!this.$isServer && this.autoplayHoverPause) {\n      this.$el.addEventListener(\"mouseenter\", this.pauseAutoplay);\n      this.$el.addEventListener(\"mouseleave\", this.startAutoplay);\n    }\n\n    this.startAutoplay();\n  }\n};\n\nexport default autoplay;\n","/* eslint-disable fp/no-let */\n/*\n * Returns a function, that, as long as it continues to be invoked, will not\n * be triggered. The function will be called after it stops being called for\n * N milliseconds. If `immediate` is passed, trigger the function on the\n * leading edge, instead of the trailing.\n*/\nconst debounce = (func, wait, immediate) => {\n  let timeout;\n  return () => {\n    const context = this;\n    const later = () => {\n      timeout = null;\n      if (!immediate) {\n        func.apply(context);\n      }\n    };\n    const callNow = immediate && !timeout;\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n    if (callNow) {\n      func.apply(context);\n    }\n  };\n};\n\nexport default debounce;\n","<template>\n  <div class=\"VueCarousel-navigation\">\n    <button\n      type=\"button\"\n      aria-label=\"Previous page\"\n      :tabindex=\"canAdvanceBackward ? 0 : -1\"\n      class=\"VueCarousel-navigation-button VueCarousel-navigation-prev\"\n      v-on:click.prevent=\"triggerPageAdvance('backward')\"\n      v-bind:class=\"{ 'VueCarousel-navigation--disabled': !canAdvanceBackward }\"\n      v-bind:style=\"`padding: ${clickTargetSize}px; margin-right: -${clickTargetSize}px;`\"\n      v-html=\"prevLabel\"></button>\n    <button\n      type=\"button\"\n      aria-label=\"Next page\"\n      :tabindex=\"canAdvanceForward ? 0 : -1\"\n      class=\"VueCarousel-navigation-button VueCarousel-navigation-next\"\n      v-on:click.prevent=\"triggerPageAdvance('forward')\"\n      v-bind:class=\"{ 'VueCarousel-navigation--disabled': !canAdvanceForward }\"\n      v-bind:style=\"`padding: ${clickTargetSize}px; margin-left: -${clickTargetSize}px;`\"\n      v-html=\"nextLabel\"></button>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"navigation\",\n  inject: [\"carousel\"],\n  props: {\n    /**\n     * Amount of padding to apply around the label in pixels\n     */\n    clickTargetSize: {\n      type: Number,\n      default: 8\n    },\n    /**\n     * Text content of the navigation next button\n     */\n    nextLabel: {\n      type: String,\n      default: \"&#9654\"\n    },\n    /**\n     * Text content of the navigation prev button\n     */\n    prevLabel: {\n      type: String,\n      default: \"&#9664\"\n    }\n  },\n  computed: {\n    /**\n     * @return {Boolean} Can the slider move forward?\n     */\n    canAdvanceForward() {\n      return this.carousel.canAdvanceForward || false;\n    },\n    /**\n     * @return {Boolean} Can the slider move backward?\n     */\n    canAdvanceBackward() {\n      return this.carousel.canAdvanceBackward || false;\n    }\n  },\n  methods: {\n    /**\n     * Trigger page change on +/- 1 depending on the direction\n     * @param {\"backward\"} [direction]\n     * @return {void}\n     */\n    triggerPageAdvance(direction) {\n      /**\n       * @event paginationclick\n       * @type {string}\n       */\n      this.$emit(\"navigationclick\", direction);\n    }\n  }\n};\n</script>\n\n<style scoped>\n.VueCarousel-navigation-button {\n  position: absolute;\n  top: 50%;\n  box-sizing: border-box;\n  color: #000;\n  text-decoration: none;\n  appearance: none;\n  border: none;\n  background-color: transparent;\n  padding: 0;\n  cursor: pointer;\n  outline: none;\n}\n\n.VueCarousel-navigation-button:focus {\n  outline: 1px solid lightblue;\n}\n\n.VueCarousel-navigation-next {\n  right: 0;\n  transform: translateY(-50%) translateX(100%);\n  font-family: \"system\";\n}\n\n.VueCarousel-navigation-prev {\n  left: 0;\n  transform: translateY(-50%) translateX(-100%);\n  font-family: \"system\";\n}\n\n.VueCarousel-navigation--disabled {\n  opacity: 0.5;\n  cursor: default;\n}\n\n/* Define the \"system\" font family */\n@font-face {\n  font-family: system;\n  font-style: normal;\n  font-weight: 300;\n  src: local(\".SFNSText-Light\"), local(\".HelveticaNeueDeskInterface-Light\"),\n    local(\".LucidaGrandeUI\"), local(\"Ubuntu Light\"), local(\"Segoe UI Symbol\"),\n    local(\"Roboto-Light\"), local(\"DroidSans\"), local(\"Tahoma\");\n}\n</style>\n","<template>\n  <div\n    v-show=\"carousel.pageCount > 1\"\n    class=\"VueCarousel-pagination\"\n    v-bind:class=\"{ [`VueCarousel-pagination--${paginationPositionModifierName}`]: paginationPositionModifierName }\"\n  >\n    <div class=\"VueCarousel-dot-container\" role=\"tablist\" :style=\"dotContainerStyle\">\n      <button\n        v-for=\"(page, index) in paginationCount\"\n        :key=\"`${page}_${index}`\"\n        class=\"VueCarousel-dot\"\n        aria-hidden=\"false\"\n        role=\"tab\"\n        :title=\"getDotTitle(index)\"\n        :value=\"getDotTitle(index)\"\n        :aria-label=\"getDotTitle(index)\"\n        :aria-selected=\"isCurrentDot(index) ? 'true' : 'false'\"\n        v-bind:class=\"{ 'VueCarousel-dot--active': isCurrentDot(index) }\"\n        v-on:click=\"goToPage(index)\"\n        :style=\"dotStyle(index)\"\n      ></button>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"pagination\",\n  inject: [\"carousel\"],\n  computed: {\n    paginationPositionModifierName() {\n      const { paginationPosition } = this.carousel;\n      // guard to add only required class modifiers\n      if (paginationPosition.indexOf(\"overlay\") < 0) return;\n      return paginationPosition;\n    },\n    paginationPropertyBasedOnPosition() {\n      return this.carousel.paginationPosition.indexOf(\"top\") >= 0\n        ? \"bottom\"\n        : \"top\";\n    },\n    paginationCount() {\n      return this.carousel && this.carousel.scrollPerPage\n        ? this.carousel.pageCount\n        : this.carousel.slideCount || 0;\n    },\n    dotContainerStyle() {\n      const { carousel } = this;\n      if (carousel.maxPaginationDotCount === -1)\n        return {\n          \"margin-top\": `${carousel.paginationPadding * 2}px`\n        };\n      const doublePadding = carousel.paginationPadding * 2;\n      const containerWidth =\n        carousel.maxPaginationDotCount *\n        (carousel.paginationSize + doublePadding);\n      return {\n        \"margin-top\": `${carousel.paginationPadding * 2}px`,\n        overflow: \"hidden\",\n        width: `${containerWidth}px`,\n        margin: \"0 auto\",\n        \"white-space\": \"nowrap\"\n      };\n    }\n  },\n  methods: {\n    /**\n     * Change page by index\n     * @param {number} index\n     * return {void}\n     */\n    goToPage(index) {\n      /**\n       * @event paginationclick\n       * @type {number}\n       */\n      this.$emit(\"paginationclick\", index);\n    },\n\n    /**\n     * Check on current dot\n     * @param {number} index - dot index\n     * @return {boolean}\n     */\n    isCurrentDot(index) {\n      return index === this.carousel.currentPage;\n    },\n\n    /**\n     * Generate dot title\n     * @param {number} index - dot index\n     * @return {string}\n     */\n    getDotTitle(index) {\n      return this.carousel.$children[index].title\n        ? this.carousel.$children[index].title\n        : `Item ${index}`;\n    },\n    /**\n     * Control dots appear and disappear\n     * @param {number} index - dot index\n     * @return {Object} - dot(buttn) style\n     */\n    dotStyle(index) {\n      const { carousel } = this;\n      const basicBtnStyle = {};\n      basicBtnStyle[\n        `margin-${this.paginationPropertyBasedOnPosition}`\n      ] = `${carousel.paginationPadding * 2}px`;\n\n      Object.assign(basicBtnStyle, {\n        padding: `${carousel.paginationPadding}px`,\n        width: `${carousel.paginationSize}px`,\n        height: `${carousel.paginationSize}px`,\n        \"background-color\": `${\n          this.isCurrentDot(index)\n            ? carousel.paginationActiveColor\n            : carousel.paginationColor\n        }`\n      });\n\n      if (carousel.maxPaginationDotCount === -1) return basicBtnStyle;\n\n      const eachDotsWidth =\n        carousel.paginationSize + carousel.paginationPadding * 2;\n      const maxReverse = carousel.pageCount - carousel.maxPaginationDotCount;\n      const translateAmount =\n        carousel.currentPage > maxReverse\n          ? maxReverse\n          : carousel.currentPage <= carousel.maxPaginationDotCount / 2\n            ? 0\n            : carousel.currentPage -\n              Math.ceil(carousel.maxPaginationDotCount / 2) +\n              1;\n      const transformWidth = 0 - eachDotsWidth * translateAmount;\n      return Object.assign(basicBtnStyle, {\n        \"-webkit-transform\": `translate3d(${transformWidth}px,0,0)`,\n        transform: `translate3d(${transformWidth}px,0,0)`,\n        \"-webkit-transition\": `-webkit-transform ${carousel.speed / 1000}s`,\n        transition: `transform ${carousel.speed / 1000}s`\n      });\n    }\n  }\n};\n</script>\n\n<style scoped>\n.VueCarousel-pagination {\n  width: 100%;\n  text-align: center;\n}\n\n.VueCarousel-pagination--top-overlay {\n  position: absolute;\n  top: 0;\n}\n\n.VueCarousel-pagination--bottom-overlay {\n  position: absolute;\n  bottom: 0;\n}\n\n.VueCarousel-dot-container {\n  display: inline-block;\n  margin: 0 auto;\n  padding: 0;\n}\n\n.VueCarousel-dot {\n  display: inline-block;\n  cursor: pointer;\n  appearance: none;\n  border: none;\n  background-clip: content-box;\n  box-sizing: content-box;\n  padding: 0;\n  border-radius: 100%;\n  outline: none;\n}\n\n.VueCarousel-dot:focus {\n  outline: 1px solid lightblue;\n}\n</style>\n","<template>\n  <div\n    class=\"VueCarousel-slide\"\n    tabindex=\"-1\"\n    :aria-hidden=\"!isActive\"\n    role=\"tabpanel\"\n    :class=\"{\n      'VueCarousel-slide-active': isActive,\n      'VueCarousel-slide-center': isCenter,\n      'VueCarousel-slide-adjustableHeight': isAdjustableHeight\n    }\"\n  >\n    <slot></slot>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"slide\",\n  props: [\"title\"],\n  data() {\n    return {\n      width: null\n    };\n  },\n  inject: [\"carousel\"],\n  mounted() {\n    if (!this.$isServer) {\n      this.$el.addEventListener(\"dragstart\", e => e.preventDefault());\n    }\n\n    this.$el.addEventListener(\n      this.carousel.isTouch ? \"touchend\" : \"mouseup\",\n      this.onTouchEnd\n    );\n  },\n  computed: {\n    activeSlides() {\n      const { currentPage, breakpointSlidesPerPage, $children } = this.carousel;\n      const activeSlides = [];\n      const children = $children\n        .filter(\n          child =>\n            child.$el && child.$el.className.indexOf(\"VueCarousel-slide\") >= 0\n        )\n        .map(child => child._uid);\n\n      let i = 0;\n      while (i < breakpointSlidesPerPage) {\n        const child = children[currentPage * breakpointSlidesPerPage + i];\n        activeSlides.push(child);\n        i++;\n      }\n\n      return activeSlides;\n    },\n    /**\n     * `isActive` describes whether a slide is visible\n     * @return {Boolean}\n     */\n    isActive() {\n      return this.activeSlides.indexOf(this._uid) >= 0;\n    },\n    /**\n     * `isCenter` describes whether a slide is in the center of all visible slides\n     * if perPage is an even number, we quit\n     * @return {Boolean}\n     */\n    isCenter() {\n      const { breakpointSlidesPerPage } = this.carousel;\n      if (breakpointSlidesPerPage % 2 === 0 || !this.isActive) return false;\n      return (\n        this.activeSlides.indexOf(this._uid) ===\n        Math.floor(breakpointSlidesPerPage / 2)\n      );\n    },\n    /**\n     * `isAdjustableHeight` describes if the carousel adjusts its height to the active slide(s)\n     * @return {Boolean}\n     */\n    isAdjustableHeight() {\n      const { adjustableHeight } = this.carousel;\n      return adjustableHeight;\n    }\n  },\n  methods: {\n    onTouchEnd(e) {\n      /**\n       * @event slideclick\n       * @event slide-click\n       * @type {Object}\n       */\n      const eventPosX =\n        this.carousel.isTouch && e.changedTouches && e.changedTouches.length > 0\n          ? e.changedTouches[0].clientX\n          : e.clientX;\n      const deltaX = this.carousel.dragStartX - eventPosX;\n\n      if (\n        this.carousel.minSwipeDistance === 0 ||\n        Math.abs(deltaX) < this.carousel.minSwipeDistance\n      ) {\n        this.$emit(\"slideclick\", Object.assign({}, e.currentTarget.dataset));\n        this.$emit(\"slide-click\", Object.assign({}, e.currentTarget.dataset));\n      }\n    }\n  }\n};\n</script>\n\n<style>\n.VueCarousel-slide {\n  flex-basis: inherit;\n  flex-grow: 0;\n  flex-shrink: 0;\n  user-select: none;\n  backface-visibility: hidden;\n  -webkit-touch-callout: none;\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n  outline: none;\n}\n\n.VueCarousel-slide-adjustableHeight {\n  display: table;\n  flex-basis: auto;\n  width: 100%;\n}\n</style>\n","<template>\n  <div\n    class=\"VueCarousel\"\n    v-bind:class=\"{ 'VueCarousel--reverse': paginationPosition === 'top' }\"\n  >\n    <div\n      class=\"VueCarousel-wrapper\"\n      ref=\"VueCarousel-wrapper\"\n    >\n      <div\n        ref=\"VueCarousel-inner\"\n        :class=\"[\n          'VueCarousel-inner',\n          { 'VueCarousel-inner--center': isCenterModeEnabled }\n        ]\"\n        :style=\"{\n          'transform': `translate(${currentOffset}px, 0)`,\n          'transition': dragging ? 'none' : transitionStyle,\n          'ms-flex-preferred-size': `${slideWidth}px`,\n          'webkit-flex-basis': `${slideWidth}px`,\n          'flex-basis': `${slideWidth}px`,\n          'visibility': slideWidth ? 'visible' : 'hidden',\n          'height': `${currentHeight}`,\n          'padding-left': `${padding}px`,\n          'padding-right': `${padding}px`\n        }\"\n      >\n        <slot></slot>\n      </div>\n    </div>\n\n    <slot name=\"navigation\" v-if=\"navigationEnabled\">\n      <navigation\n        v-if=\"isNavigationRequired\"\n        :clickTargetSize=\"navigationClickTargetSize\"\n        :nextLabel=\"navigationNextLabel\"\n        :prevLabel=\"navigationPrevLabel\"\n        @navigationclick=\"handleNavigation\"\n      />\n    </slot>\n\n    <slot name=\"pagination\" v-if=\"paginationEnabled\">\n      <pagination @paginationclick=\"goToPage($event, 'pagination')\"/>\n    </slot>\n  </div>\n</template>\n<script>\nimport autoplay from \"./mixins/autoplay\";\nimport debounce from \"./utils/debounce\";\nimport Navigation from \"./Navigation.vue\";\nimport Pagination from \"./Pagination.vue\";\nimport Slide from \"./Slide.vue\";\n\nconst transitionStartNames = {\n  onwebkittransitionstart: \"webkitTransitionStart\",\n  onmoztransitionstart: \"transitionstart\",\n  onotransitionstart: \"oTransitionStart otransitionstart\",\n  ontransitionstart: \"transitionstart\"\n};\nconst transitionEndNames = {\n  onwebkittransitionend: \"webkitTransitionEnd\",\n  onmoztransitionend: \"transitionend\",\n  onotransitionend: \"oTransitionEnd otransitionend\",\n  ontransitionend: \"transitionend\"\n};\nconst getTransitionStart = () => {\n  for (let name in transitionStartNames) {\n    if (name in window) {\n      return transitionStartNames[name];\n    }\n  }\n};\nconst getTransitionEnd = () => {\n  for (let name in transitionEndNames) {\n    if (name in window) {\n      return transitionEndNames[name];\n    }\n  }\n};\n\nexport default {\n  name: \"carousel\",\n  beforeUpdate() {\n    this.computeCarouselWidth();\n  },\n  components: {\n    Navigation,\n    Pagination,\n    Slide\n  },\n  data() {\n    return {\n      browserWidth: null,\n      carouselWidth: 0,\n      currentPage: 0,\n      dragging: false,\n      dragMomentum: 0,\n      dragOffset: 0,\n      dragStartY: 0,\n      dragStartX: 0,\n      isTouch: typeof window !== \"undefined\" && \"ontouchstart\" in window,\n      offset: 0,\n      refreshRate: 16,\n      slideCount: 0,\n      transitionstart: \"transitionstart\",\n      transitionend: \"transitionend\",\n      currentHeight: \"auto\"\n    };\n  },\n  mixins: [autoplay],\n  // use `provide` to avoid `Slide` being nested with other components\n  provide() {\n    return {\n      carousel: this\n    };\n  },\n  props: {\n    /**\n     *  Adjust the height of the carousel for the current slide\n     */\n    adjustableHeight: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * Slide transition easing for adjustableHeight\n     * Any valid CSS transition easing accepted\n     */\n    adjustableHeightEasing: {\n      type: String\n    },\n    /**\n     *  Center images when the size is less than the container width\n     */\n    centerMode: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * Slide transition easing\n     * Any valid CSS transition easing accepted\n     */\n    easing: {\n      type: String,\n      validator: function(value) {\n        return (\n          [\"ease\", \"linear\", \"ease-in\", \"ease-out\", \"ease-in-out\"].indexOf(\n            value\n          ) !== -1 || value.includes(\"cubic-bezier\")\n        );\n      },\n      default: \"ease\"\n    },\n    /**\n     * Flag to make the carousel loop around when it reaches the end\n     */\n    loop: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * Minimum distance for the swipe to trigger\n     * a slide advance\n     */\n    minSwipeDistance: {\n      type: Number,\n      default: 8\n    },\n    /**\n     * Flag to toggle mouse dragging\n     */\n    mouseDrag: {\n      type: Boolean,\n      default: true\n    },\n    /**\n     * Flag to toggle touch dragging\n     */\n    touchDrag: {\n      type: Boolean,\n      default: true\n    },\n    /**\n     * Listen for an external navigation request using this prop.\n     */\n    navigateTo: {\n      type: [Number, Array],\n      default: 0\n    },\n    /**\n     * Amount of padding to apply around the label in pixels\n     */\n    navigationClickTargetSize: {\n      type: Number,\n      default: 8\n    },\n    /**\n     * Flag to render the navigation component\n     * (next/prev buttons)\n     */\n    navigationEnabled: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * Text content of the navigation next button\n     */\n    navigationNextLabel: {\n      type: String,\n      default: \"&#9654\"\n    },\n    /**\n     * Text content of the navigation prev button\n     */\n    navigationPrevLabel: {\n      type: String,\n      default: \"&#9664\"\n    },\n    /**\n     * The fill color of the active pagination dot\n     * Any valid CSS color is accepted\n     */\n    paginationActiveColor: {\n      type: String,\n      default: \"#000000\"\n    },\n    /**\n     * The fill color of pagination dots\n     * Any valid CSS color is accepted\n     */\n    paginationColor: {\n      type: String,\n      default: \"#efefef\"\n    },\n    /**\n     * Flag to render pagination component\n     */\n    paginationEnabled: {\n      type: Boolean,\n      default: true\n    },\n    /**\n     * The padding inside each pagination dot\n     * Pixel values are accepted\n     */\n    paginationPadding: {\n      type: Number,\n      default: 10\n    },\n    /**\n     * Configure the position for the pagination component.\n     * The possible values are: 'bottom', 'top', 'bottom-overlay' and 'top-overlay'\n     */\n    paginationPosition: {\n      type: String,\n      default: \"bottom\"\n    },\n    /**\n     * The size of each pagination dot\n     * Pixel values are accepted\n     */\n    paginationSize: {\n      type: Number,\n      default: 10\n    },\n    /**\n     * Maximum number of slides displayed on each page\n     */\n    perPage: {\n      type: Number,\n      default: 2\n    },\n    /**\n     * Configure the number of visible slides with a particular browser width.\n     * This will be an array of arrays, ex. [[320, 2], [1199, 4]]\n     * Formatted as [x, y] where x=browser width, and y=number of slides displayed.\n     * ex. [1199, 4] means if (window <= 1199) then show 4 slides per page\n     */\n    perPageCustom: {\n      type: Array\n    },\n    /**\n     * Resistance coefficient to dragging on the edge of the carousel\n     * This dictates the effect of the pull as you move towards the boundaries\n     */\n    resistanceCoef: {\n      type: Number,\n      default: 20\n    },\n    /**\n     * Scroll per page, not per item\n     */\n    scrollPerPage: {\n      type: Boolean,\n      default: true\n    },\n    /**\n     *  Space padding option adds left and right padding style (in pixels) onto VueCarousel-inner.\n     */\n    spacePadding: {\n      type: Number,\n      default: 0\n    },\n    /**\n     *  Specify by how much should the space padding value be multiplied of, to re-arange the final slide padding.\n     */\n    spacePaddingMaxOffsetFactor: {\n      type: Number,\n      default: 0\n    },\n    /**\n     * Slide transition speed\n     * Number of milliseconds accepted\n     */\n    speed: {\n      type: Number,\n      default: 500\n    },\n    /**\n     * Name (tag) of slide component\n     * Overwrite when extending slide component\n     */\n    tagName: {\n      type: String,\n      default: \"slide\"\n    },\n    /**\n     * Support for v-model functionality\n     */\n    value: {\n      type: Number\n    },\n    /**\n     * Support Max pagination dot amount\n     */\n    maxPaginationDotCount: {\n      type: Number,\n      default: -1\n    },\n    /**\n     * Support right to left\n     */\n    rtl: {\n      type: Boolean,\n      default: false\n    }\n  },\n  watch: {\n    value(val) {\n      if (val !== this.currentPage) {\n        this.goToPage(val);\n        this.render();\n      }\n    },\n    navigateTo: {\n      immediate: true,\n      handler(val) {\n        // checking if val is an array, for arrays typeof returns object\n        if (typeof val === \"object\") {\n          if (val[1] == false) {\n            // following code is to disable animation\n            this.dragging = true;\n\n            // clear dragging after refresh rate\n            setTimeout(() => {\n              this.dragging = false;\n            }, this.refreshRate);\n          }\n\n          this.$nextTick(() => {\n            this.goToPage(val[0]);\n          });\n        } else {\n          this.$nextTick(() => {\n            this.goToPage(val);\n          });\n        }\n      }\n    },\n    currentPage(val) {\n      this.$emit(\"pageChange\", val);\n      this.$emit(\"page-change\", val);\n      this.$emit(\"input\", val);\n    },\n    autoplay(val) {\n      if (val === false) {\n        this.pauseAutoplay();\n      } else {\n        this.restartAutoplay();\n      }\n    }\n  },\n  computed: {\n    /**\n     * Given a viewport width, find the number of slides to display\n     * @param  {Number} width Current viewport width in pixels\n     * @return {Number} Number of slides to display\n     */\n    breakpointSlidesPerPage() {\n      if (!this.perPageCustom) {\n        return this.perPage;\n      }\n\n      const breakpointArray = this.perPageCustom;\n      const width = this.browserWidth;\n\n      const breakpoints = breakpointArray.sort(\n        (a, b) => (a[0] > b[0] ? -1 : 1)\n      );\n\n      // Reduce the breakpoints to entries where the width is in range\n      // The breakpoint arrays are formatted as [widthToMatch, numberOfSlides]\n      const matches = breakpoints.filter(breakpoint => width >= breakpoint[0]);\n\n      // If there is a match, the result should return only\n      // the slide count from the first matching breakpoint\n      const match = matches[0] && matches[0][1];\n\n      return match || this.perPage;\n    },\n    /**\n     * @return {Boolean} Can the slider move forward?\n     */\n    canAdvanceForward() {\n      return this.loop || this.offset < this.maxOffset;\n    },\n    /**\n     * @return {Boolean} Can the slider move backward?\n     */\n    canAdvanceBackward() {\n      return this.loop || this.currentPage > 0;\n    },\n    /**\n     * Number of slides to display per page in the current context.\n     * This is constant unless responsive perPage option is set.\n     * @return {Number} The number of slides per page to display\n     */\n    currentPerPage() {\n      return !this.perPageCustom || this.$isServer\n        ? this.perPage\n        : this.breakpointSlidesPerPage;\n    },\n    /**\n     * The horizontal distance the inner wrapper is offset while navigating.\n     * @return {Number} Pixel value of offset to apply\n     */\n    currentOffset() {\n      if (this.isCenterModeEnabled) {\n        return 0;\n      } else if (this.rtl) {\n        return (this.offset - this.dragOffset) * 1;\n      } else {\n        return (this.offset + this.dragOffset) * -1;\n      }\n    },\n    isHidden() {\n      return this.carouselWidth <= 0;\n    },\n    /**\n     * Maximum offset the carousel can slide\n     * Considering the spacePadding\n     * @return {Number}\n     */\n    maxOffset() {\n      return Math.max(\n        this.slideWidth * (this.slideCount - this.currentPerPage) -\n          this.spacePadding * this.spacePaddingMaxOffsetFactor,\n        0\n      );\n    },\n    /**\n     * Calculate the number of pages of slides\n     * @return {Number} Number of pages\n     */\n    pageCount() {\n      return this.scrollPerPage\n        ? Math.ceil(this.slideCount / this.currentPerPage)\n        : this.slideCount - this.currentPerPage + 1;\n    },\n    /**\n     * Calculate the width of each slide\n     * @return {Number} Slide width\n     */\n    slideWidth() {\n      const width = this.carouselWidth - this.spacePadding * 2;\n      const perPage = this.currentPerPage;\n\n      return width / perPage;\n    },\n    /**\n     * @return {Boolean} Is navigation required?\n     */\n    isNavigationRequired() {\n      return this.slideCount > this.currentPerPage;\n    },\n    /**\n     * @return {Boolean} Center images when have less than min currentPerPage value\n     */\n    isCenterModeEnabled() {\n      return this.centerMode && !this.isNavigationRequired;\n    },\n    transitionStyle() {\n      const speed = `${this.speed / 1000}s`;\n      const transtion = `${speed} ${this.easing} transform`;\n      if (this.adjustableHeight) {\n        return `${transtion}, height ${speed} ${this.adjustableHeightEasing ||\n          this.easing}`;\n      }\n\n      return transtion;\n    },\n    padding() {\n      const padding = this.spacePadding;\n      return padding > 0 ? padding : false;\n    }\n  },\n  methods: {\n    /**\n     * @return {Number} The index of the next page\n     * */\n    getNextPage() {\n      if (this.currentPage < this.pageCount - 1) {\n        return this.currentPage + 1;\n      }\n      return this.loop ? 0 : this.currentPage;\n    },\n    /**\n     * @return {Number} The index of the previous page\n     * */\n    getPreviousPage() {\n      if (this.currentPage > 0) {\n        return this.currentPage - 1;\n      }\n      return this.loop ? this.pageCount - 1 : this.currentPage;\n    },\n    /**\n     * Increase/decrease the current page value\n     * @param  {String} direction (Optional) The direction to advance\n     */\n    advancePage(direction) {\n      if (direction && direction === \"backward\" && this.canAdvanceBackward) {\n        this.goToPage(this.getPreviousPage(), \"navigation\");\n      } else if (\n        (!direction || (direction && direction !== \"backward\")) &&\n        this.canAdvanceForward\n      ) {\n        this.goToPage(this.getNextPage(), \"navigation\");\n      }\n    },\n    goToLastSlide() {\n      // following code is to disable animation\n      this.dragging = true;\n\n      // clear dragging after refresh rate\n      setTimeout(() => {\n        this.dragging = false;\n      }, this.refreshRate);\n\n      this.$nextTick(() => {\n        this.goToPage(this.pageCount);\n      });\n    },\n    /**\n     * A mutation observer is used to detect changes to the containing node\n     * in order to keep the magnet container in sync with the height its reference node.\n     */\n    attachMutationObserver() {\n      const MutationObserver =\n        window.MutationObserver ||\n        window.WebKitMutationObserver ||\n        window.MozMutationObserver;\n\n      if (MutationObserver) {\n        let config = {\n          attributes: true,\n          data: true\n        };\n        if (this.adjustableHeight) {\n          config = {\n            ...config,\n            childList: true,\n            subtree: true,\n            characterData: true\n          };\n        }\n        this.mutationObserver = new MutationObserver(() => {\n          this.$nextTick(() => {\n            this.computeCarouselWidth();\n            this.computeCarouselHeight();\n          });\n        });\n        if (this.$parent.$el) {\n          let carouselInnerElements = this.$el.getElementsByClassName(\n            \"VueCarousel-inner\"\n          );\n          for (let i = 0; i < carouselInnerElements.length; i++) {\n            this.mutationObserver.observe(carouselInnerElements[i], config);\n          }\n        }\n      }\n    },\n    handleNavigation(direction) {\n      this.advancePage(direction);\n      this.pauseAutoplay();\n      this.$emit(\"navigation-click\", direction);\n    },\n    /**\n     * Stop listening to mutation changes\n     */\n    detachMutationObserver() {\n      if (this.mutationObserver) {\n        this.mutationObserver.disconnect();\n      }\n    },\n    /**\n     * Get the current browser viewport width\n     * @return {Number} Browser\"s width in pixels\n     */\n    getBrowserWidth() {\n      this.browserWidth = window.innerWidth;\n      return this.browserWidth;\n    },\n    /**\n     * Get the width of the carousel DOM element\n     * @return {Number} Width of the carousel in pixels\n     */\n    getCarouselWidth() {\n      let carouselInnerElements = this.$el.getElementsByClassName(\n        \"VueCarousel-inner\"\n      );\n      for (let i = 0; i < carouselInnerElements.length; i++) {\n        if (carouselInnerElements[i].clientWidth > 0) {\n          this.carouselWidth = carouselInnerElements[i].clientWidth || 0;\n        }\n      }\n      return this.carouselWidth;\n    },\n    /**\n     * Get the maximum height of the carousel active slides\n     * @return {String} The carousel height\n     */\n    getCarouselHeight() {\n      if (!this.adjustableHeight) {\n        return \"auto\";\n      }\n\n      const slideOffset = this.currentPerPage * (this.currentPage + 1) - 1;\n      const maxSlideHeight = [...Array(this.currentPerPage)]\n        .map((_, idx) => this.getSlide(slideOffset + idx))\n        .reduce(\n          (clientHeight, slide) =>\n            Math.max(clientHeight, (slide && slide.$el.clientHeight) || 0),\n          0\n        );\n\n      this.currentHeight =\n        maxSlideHeight === 0 ? \"auto\" : `${maxSlideHeight}px`;\n\n      return this.currentHeight;\n    },\n    /**\n     * Filter slot contents to slide instances and return length\n     * @return {Number} The number of slides\n     */\n    getSlideCount() {\n      this.slideCount =\n        (this.$slots &&\n          this.$slots.default &&\n          this.$slots.default.filter(\n            slot =>\n              slot.tag &&\n              slot.tag.match(`^vue-component-\\\\d+-${this.tagName}$`) !== null\n          ).length) ||\n        0;\n    },\n    /**\n     * Gets the slide at the specified index\n     * @return {Object} The slide at the specified index\n     */\n    getSlide(index) {\n      const slides = this.$children.filter(\n        child =>\n          child.$vnode.tag.match(`^vue-component-\\\\d+-${this.tagName}$`) !==\n          null\n      );\n      return slides[index];\n    },\n    /**\n     * Set the current page to a specific value\n     * This function will only apply the change if the value is within the carousel bounds\n     * for carousel scrolling per page.\n     * @param  {Number} page The value of the new page number\n     * @param  {string|undefined} advanceType An optional value describing the type of page advance\n     */\n    goToPage(page, advanceType) {\n      if (page >= 0 && page <= this.pageCount) {\n        this.offset = this.scrollPerPage\n          ? Math.min(\n              this.slideWidth * this.currentPerPage * page,\n              this.maxOffset\n            )\n          : this.slideWidth * page;\n\n        // restart autoplay if specified\n        if (this.autoplay && !this.autoplayHoverPause) {\n          this.restartAutoplay();\n        }\n\n        // update the current page\n        this.currentPage = page;\n\n        if (advanceType === \"pagination\") {\n          this.pauseAutoplay();\n          this.$emit(\"pagination-click\", page);\n        }\n      }\n    },\n    /**\n     * Trigger actions when mouse is pressed\n     * @param  {Object} e The event object\n     */\n    /* istanbul ignore next */\n    onStart(e) {\n      // alert(\"start\");\n\n      // detect right click\n      if (e.button == 2) {\n        return;\n      }\n\n      document.addEventListener(\n        this.isTouch ? \"touchend\" : \"mouseup\",\n        this.onEnd,\n        true\n      );\n\n      document.addEventListener(\n        this.isTouch ? \"touchmove\" : \"mousemove\",\n        this.onDrag,\n        true\n      );\n\n      this.startTime = e.timeStamp;\n      this.dragging = true;\n      this.dragStartX = this.isTouch ? e.touches[0].clientX : e.clientX;\n      this.dragStartY = this.isTouch ? e.touches[0].clientY : e.clientY;\n    },\n    /**\n     * Trigger actions when mouse is released\n     * @param  {Object} e The event object\n     */\n\n    onEnd(e) {\n      // restart autoplay if specified\n      if (this.autoplay && !this.autoplayHoverPause) {\n        this.restartAutoplay();\n      }\n      this.pauseAutoplay();\n\n      // compute the momemtum speed\n      const eventPosX = this.isTouch ? e.changedTouches[0].clientX : e.clientX;\n      const deltaX = this.dragStartX - eventPosX;\n      this.dragMomentum = deltaX / (e.timeStamp - this.startTime);\n\n      // take care of the minSwipteDistance prop, if not 0 and delta is bigger than delta\n      if (\n        this.minSwipeDistance !== 0 &&\n        Math.abs(deltaX) >= this.minSwipeDistance\n      ) {\n        const width = this.scrollPerPage\n          ? this.slideWidth * this.currentPerPage\n          : this.slideWidth;\n        this.dragOffset = this.dragOffset + Math.sign(deltaX) * (width / 2);\n      }\n\n      if (this.rtl) {\n        this.offset -= this.dragOffset;\n      } else {\n        this.offset += this.dragOffset;\n      }\n      this.dragOffset = 0;\n      this.dragging = false;\n\n      this.render();\n\n      // clear events listeners\n      document.removeEventListener(\n        this.isTouch ? \"touchend\" : \"mouseup\",\n        this.onEnd,\n        true\n      );\n      document.removeEventListener(\n        this.isTouch ? \"touchmove\" : \"mousemove\",\n        this.onDrag,\n        true\n      );\n    },\n    /**\n     * Trigger actions when mouse is pressed and then moved (mouse drag)\n     * @param  {Object} e The event object\n     */\n    onDrag(e) {\n      const eventPosX = this.isTouch ? e.touches[0].clientX : e.clientX;\n      const eventPosY = this.isTouch ? e.touches[0].clientY : e.clientY;\n      const newOffsetX = this.dragStartX - eventPosX;\n      const newOffsetY = this.dragStartY - eventPosY;\n\n      // if it is a touch device, check if we are below the min swipe threshold\n      // (if user scroll the page on the component)\n      if (this.isTouch && Math.abs(newOffsetX) < Math.abs(newOffsetY)) {\n        return;\n      }\n\n      e.stopImmediatePropagation();\n\n      this.dragOffset = newOffsetX;\n      const nextOffset = this.offset + this.dragOffset;\n\n      if (this.rtl) {\n        if (this.offset == 0 && this.dragOffset > 0) {\n          this.dragOffset = Math.sqrt(this.resistanceCoef * this.dragOffset);\n        } else if (this.offset == this.maxOffset && this.dragOffset < 0) {\n          this.dragOffset = -Math.sqrt(-this.resistanceCoef * this.dragOffset);\n        }\n      } else {\n        if (nextOffset < 0) {\n          this.dragOffset = -Math.sqrt(-this.resistanceCoef * this.dragOffset);\n        } else if (nextOffset > this.maxOffset) {\n          this.dragOffset = Math.sqrt(this.resistanceCoef * this.dragOffset);\n        }\n      }\n    },\n    onResize() {\n      this.computeCarouselWidth();\n      this.computeCarouselHeight();\n\n      this.dragging = true; // force a dragging to disable animation\n      this.render();\n      // clear dragging after refresh rate\n      setTimeout(() => {\n        this.dragging = false;\n      }, this.refreshRate);\n    },\n    render() {\n      // add extra slides depending on the momemtum speed\n      if (this.rtl) {\n        this.offset -=\n          Math.max(\n            -this.currentPerPage + 1,\n            Math.min(Math.round(this.dragMomentum), this.currentPerPage - 1)\n          ) * this.slideWidth;\n      } else {\n        this.offset +=\n          Math.max(\n            -this.currentPerPage + 1,\n            Math.min(Math.round(this.dragMomentum), this.currentPerPage - 1)\n          ) * this.slideWidth;\n      }\n\n      // & snap the new offset on a slide or page if scrollPerPage\n      const width = this.scrollPerPage\n        ? this.slideWidth * this.currentPerPage\n        : this.slideWidth;\n\n      // lock offset to either the nearest page, or to the last slide\n      const lastFullPageOffset =\n        width * Math.floor(this.slideCount / (this.currentPerPage - 1));\n      const remainderOffset =\n        lastFullPageOffset +\n        this.slideWidth * (this.slideCount % this.currentPerPage);\n      if (this.offset > (lastFullPageOffset + remainderOffset) / 2) {\n        this.offset = remainderOffset;\n      } else {\n        this.offset = width * Math.round(this.offset / width);\n      }\n\n      // clamp the offset between 0 -> maxOffset\n      this.offset = Math.max(0, Math.min(this.offset, this.maxOffset));\n\n      // update the current page\n      this.currentPage = this.scrollPerPage\n        ? Math.round(this.offset / this.slideWidth / this.currentPerPage)\n        : Math.round(this.offset / this.slideWidth);\n    },\n    /**\n     * Re-compute the width of the carousel and its slides\n     */\n    computeCarouselWidth() {\n      this.getSlideCount();\n      this.getBrowserWidth();\n      this.getCarouselWidth();\n      this.setCurrentPageInBounds();\n    },\n    /**\n     * Re-compute the height of the carousel and its slides\n     */\n    computeCarouselHeight() {\n      this.getCarouselHeight();\n    },\n    /**\n     * When the current page exceeds the carousel bounds, reset it to the maximum allowed\n     */\n    setCurrentPageInBounds() {\n      if (!this.canAdvanceForward && this.scrollPerPage) {\n        const setPage = this.pageCount - 1;\n        this.currentPage = setPage >= 0 ? setPage : 0;\n        this.offset = Math.max(0, Math.min(this.offset, this.maxOffset));\n      }\n    },\n    handleTransitionStart() {\n      this.$emit(\"transitionStart\");\n      this.$emit(\"transition-start\");\n    },\n    handleTransitionEnd() {\n      this.$emit(\"transitionEnd\");\n      this.$emit(\"transition-end\");\n    }\n  },\n  mounted() {\n    window.addEventListener(\n      \"resize\",\n      debounce(this.onResize, this.refreshRate)\n    );\n\n    // setup the start event only if touch device or mousedrag activated\n    if ((this.isTouch && this.touchDrag) || this.mouseDrag) {\n      this.$refs[\"VueCarousel-wrapper\"].addEventListener(\n        this.isTouch ? \"touchstart\" : \"mousedown\",\n        this.onStart\n      );\n    }\n\n    this.attachMutationObserver();\n    this.computeCarouselWidth();\n    this.computeCarouselHeight();\n\n    this.transitionstart = getTransitionEnd();\n    this.$refs[\"VueCarousel-inner\"].addEventListener(\n      this.transitionstart,\n      this.handleTransitionStart\n    );\n    this.transitionend = getTransitionEnd();\n    this.$refs[\"VueCarousel-inner\"].addEventListener(\n      this.transitionend,\n      this.handleTransitionEnd\n    );\n\n    this.$emit(\"mounted\");\n\n    // when autoplay direction is backward start from the last slide\n    if (this.autoplayDirection === \"backward\") {\n      this.goToLastSlide();\n    }\n  },\n  beforeDestroy() {\n    this.detachMutationObserver();\n    window.removeEventListener(\"resize\", this.getBrowserWidth);\n    this.$refs[\"VueCarousel-inner\"].removeEventListener(\n      this.transitionstart,\n      this.handleTransitionStart\n    );\n    this.$refs[\"VueCarousel-inner\"].removeEventListener(\n      this.transitionend,\n      this.handleTransitionEnd\n    );\n\n    this.$refs[\"VueCarousel-wrapper\"].removeEventListener(\n      this.isTouch ? \"touchstart\" : \"mousedown\",\n      this.onStart\n    );\n  }\n};\n</script>\n\n<style>\n.VueCarousel {\n  display: flex;\n  flex-direction: column;\n  position: relative;\n}\n\n.VueCarousel--reverse {\n  flex-direction: column-reverse;\n}\n\n.VueCarousel-wrapper {\n  width: 100%;\n  position: relative;\n  overflow: hidden;\n}\n\n.VueCarousel-inner {\n  display: flex;\n  flex-direction: row;\n  backface-visibility: hidden;\n}\n\n.VueCarousel-inner--center {\n  justify-content: center;\n}\n</style>\n","import Carousel from \"./Carousel.vue\";\nimport Slide from \"./Slide.vue\";\n\nconst install = Vue => {\n  Vue.component(\"carousel\", Carousel);\n  Vue.component(\"slide\", Slide);\n};\n\nexport default {\n  install\n};\n\nexport { Carousel, Slide };\n"]}